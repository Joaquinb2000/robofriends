{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBar.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","element","i","length","push","SearchBar","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","btn","fetch","then","response","json","users","this","console","log","filterRobots","filter","robot","substring","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAceA,EAZF,SAAC,GAAoB,EAAnBC,GAAoB,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACrB,OACI,sBAAKC,UAAU,iDAAf,UACI,qBAAKC,IAAG,+BAA0BH,EAA1B,YAA0CI,IAAI,gBACtD,gCACI,6BAAKJ,IACL,4BAAIC,WCYLI,EAhBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACRC,EAAeD,EAAOE,KAAI,SAACC,EAASC,GACtC,OAAO,cAAC,EAAD,CACKX,GAAIO,EAAOI,GAAGX,GAAIC,KAAMM,EAAOI,GAAGV,KAAMC,MAAQK,EAAOI,GAAGT,OAA7DS,MAMb,OAH2B,IAAvBH,EAAcI,QACdJ,EAAcK,KAAM,qEAAU,IAG9B,8BACGL,KCAIM,EAbE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACf,OACI,qBAAKZ,UAAU,MAAf,SACI,uBACIa,KAAK,SACLC,YAAY,gBACZd,UAAW,oCACXe,SAAWH,OCCZI,EARD,SAACC,GACX,OACI,qBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YC4CJC,G,wDAzCX,aAAc,IAAD,8BACT,gBAcJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAO,CACR1B,OAAQ,GACRuB,YAAa,GACbI,IAAK,GALA,E,qDASb,WAAoB,IAAD,OACfC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKV,SAAS,CAACtB,OAAQgC,S,oBAQ7C,WACI,MAAkCC,KAAKP,MAAhC1B,EAAP,EAAOA,OAAQuB,EAAf,EAAeA,YAAaI,EAA5B,EAA4BA,IAC5BO,QAAQC,IAAIR,GACZ,IAAMS,EAAcpC,EAAOqC,QAAO,SAAAC,GAC9B,OAAOA,EAAM5C,KAAK6C,UAAU,EAAGhB,EAAYlB,QAAQmC,cAAcC,SAASlB,EAAYiB,kBAI1F,OACI,sBAAK5C,UAAU,mBAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWY,aAAcyB,KAAKb,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUpB,OAAUoC,a,GAlCtBM,IAAMC,YCKTC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,Q,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9d8ef99c.chunk.js","sourcesContent":["import React from  'react';\r\n\r\nconst Card = ({id, name, email})=>{\r\n    return(\r\n        <div className=\"bg-navy white dib pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${name}?200x200`} alt=\"robot image\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList= ({robots})=>{\r\n    const cardComponent= robots.map((element, i)=> {\r\n        return <Card \r\n            key={i} id={robots[i].id} name={robots[i].name} email= {robots[i].email}/>\r\n    });\r\n\r\n    if (cardComponent.length===0)\r\n        cardComponent.push (<h1 key= {0}>Sorry we couldn't find any robots :(</h1>);\r\n\r\n    return (\r\n        <div>\r\n          {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from \"react\";\r\n\r\nconst SearchBar= ({searchChange})=>{\r\n    return (\r\n        <div className=\"pa3\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"Search robots\"\r\n                className= \"pa2 ba b---green bg-lightest-blue\"\r\n                onChange= {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n\r\n","import React from 'react'\r\n\r\nconst Scroll= (props) =>{\r\n    return (\r\n        <div style= {{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\nimport SearchBar from '../Components/SearchBar';\r\nimport Scroll from '../Components/Scroll'\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state= {\r\n            robots: [],\r\n            searchfield: \"\",\r\n            btn: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(response=> response.json())\r\n            .then(users=> this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange= (event)=>{\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    \r\n    render () {\r\n        const {robots, searchfield, btn}= this.state;\r\n        console.log(btn);\r\n        const filterRobots= robots.filter(robot => {\r\n            return robot.name.substring(0, searchfield.length).toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n\r\n\r\n        return (\r\n            <div className=\"tc courier white\">\r\n                <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n                <SearchBar searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots= { filterRobots } />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n   \r\n};\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}